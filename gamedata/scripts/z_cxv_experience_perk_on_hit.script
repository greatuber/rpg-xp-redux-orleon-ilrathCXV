local ghost_ammo = 0
local gunslinger = 0
local rifleman = 0
local heavy_gunner = 0
local berserker = 0
local jamming_shot = 0
local disarming_shot = 0
local mutant_slayer = 0
local deadeye = 0
local lucky_strike = 0

local vampirism = 0
local warmonger = 0
local bloody_mess = 0

local function experience_perk_on_update(id, data)	-- messy I know (will look into a cleaner solution later to avoid YandereDev coding trash)
	if (id == "perk_ghost_ammo") then
		ghost_ammo = data["curr_level"]
	end
	if (id == "perk_gunslinger") then
		gunslinger = data["curr_level"]
	end
	if (id == "perk_rifleman") then
		rifleman = data["curr_level"]
	end
	if (id == "perk_heavy_gunner") then
		heavy_gunner = data["curr_level"]
	end
	if (id == "perk_berserker") then
		berserker = data["curr_level"]
	end
	if (id == "perk_jamming_shot") then
		jamming_shot = data["curr_level"]
	end
	if (id == "perk_disarming_shot") then
		disarming_shot = data["curr_level"]
	end
	if (id == "perk_mutant_slayer") then
		mutant_slayer = data["curr_level"]
	end
	if (id == "perk_vampirism") then
		vampirism = data["curr_level"]
	end
	if (id == "perk_warmonger") then
		warmonger = data["curr_level"]
	end
	if (id == "perk_bloody_mess") then
		bloody_mess = data["curr_level"]
	end
	if (id == "perk_deadeye") then
		deadeye = data["curr_level"]
	end
	if (id == "perk_lucky_strike") then
		lucky_strike = data["curr_level"]
	end
end

local sms = actor_menu.set_msg
local criticalChance = 0
local criticalMultiplier = 1

local get_safe_sound_object = xr_sound.get_safe_sound_object

local function play_sound_on_actor(snd, volume, frequency)
	if not snd then
		trace("snd is nil")
		return
	end
	local actor = db.actor
	local snd = get_safe_sound_object(snd)
	if snd then
		snd:play(actor, 0, sound_object.s2d)
		snd.volume = volume or 1
		snd.frequency = frequency or 1
		return snd
	end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

local wp_table 				= {}
wp_table.w_explosive        = "explosive"
wp_table.w_misc           	= "misc"
wp_table.w_melee          	= "melee"
wp_table.w_smg          	= "smg"
wp_table.w_pistol          	= "smg"
wp_table.w_rifle            = "rifle"
wp_table.w_sniper           = "heavy"
wp_table.w_shotgun          = "heavy"

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function sortK_of(weapon)
    if not weapon then return "empty hands" end
    local kind = ini_sys:r_string(weapon:section(), "kind") or nil
	if kind == "w_explosive" then
		local slot = ini_sys:r_string(weapon:section(), "slot")
		if slot ~= "3" then
			local class = ini_sys:r_string(weapon:section(), "weapon_class")
			if class == "heavy_weapon" then
				kind = "w_shotgun"
			end	
		end
	end
    return wp_table[kind]
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function kaboom(npc, dice)
	if not dice then return end
    local boom = "mine_new_blow"
    local npc_id = npc:id()
    local npc_position = npc:position()
    local npc_level_vertex_id = npc:level_vertex_id()
    local npc_game_vertex_id = npc:game_vertex_id()
    if dice then 
        function explode(explode_id)
            local explode_obj = get_object_by_id(explode_id)
            if explode_obj then
                local sim = alife()
                sim:release(sim:object(npc_id))
                explode_obj:explode(0)
                return true
            end
            return false
        end
        printf("Dice is %s, let's boom", dice)
        local explode_obj = alife_create_item(boom, {npc_position, npc_level_vertex_id, npc_game_vertex_id, nil})
        CreateTimeEvent(explode_obj.id, explode_obj.id, 0, explode, explode_obj.id)
    else
        printf("No luck this time, dice is %s", dice)
    end
end

local function get_object_by_id(id) -- same as _g.script one but without spamming in console
    if not id then return end
    if (id == AC_ID) then return db.actor end

    local obj = db.storage[id] and db.storage[id].object or level_object_by_id(id)
    if not obj then return end
    return obj
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function perk_damage_effects(npc, shit, bone_id, flags)
	
	if shit.draftsman:id() ~= db.actor:id() then
		return
	end
	
	if bone_id == 65535 then
		return
	end
	
	if shit.power >= 50 then return end
	
	local isCompanion = npc:has_info("npcx_is_companion")
	if isCompanion then return end
	
    if not (shit.draftsman and shit.draftsman:id() == 0) then return end
    if shit.draftsman:id() ~= db.actor:id() then return end

    local weapon = db.actor:active_item()
    if not weapon then return end

    local weapon_class = sortK_of(weapon)
	local head_shot = perk_based_artefacts_bone_mapper.is_critical_bone(npc:clsid(), bone_id)
	
	local is_breaked = ((bone_id >=20) and (bone_id <= 45))
    local is_breaked2 = bone_id >=36

    local base_shit = shit.power
    local dmg_increase = 1.0

------------------------------------------------------------> Lucky Strike and Deadeye

	if (lucky_strike <= 0) and (deadeye >= 1) then	-- if you have DE but don't have LS...
		criticalChance = 1							-- Crit Chance is 0.1%
	elseif (lucky_strike >= 1) then
		criticalChance = (lucky_strike ^ 2) * 10	-- Crit Chance is (LS^2)%
	end
	
	if head_shot then
		criticalChance = criticalChance * 1.5
	end
	
	if (lucky_strike >= 1) and (deadeye <= 0) then	-- if you have LS but don't have DE...
		criticalMultiplier = 1.1					-- Crit Multiplier is 10%
	elseif (deadeye >= 1) then
		criticalMultiplier = 1 + (0.25 * deadeye)	-- Crit Multiplier is (25  * DE)%
	end
	
------------------------------------------------------------> Mutant Slayer
    if mutant_slayer >= 1 then
        if IsMonster(nil,npc:clsid()) then
            dmg_increase = dmg_increase + (mutant_slayer * 0.05)
        end
    end
------------------------------------------------------------> Gunslinger
	if ((gunslinger >= 1) and (weapon_class == "smg"))then
        dmg_increase = dmg_increase + (gunslinger * 0.05)
------------------------------------------------------------> Rifleman
	elseif ((rifleman >= 1) and (weapon_class == "rifle"))then
        dmg_increase = dmg_increase + (rifleman * 0.05)
------------------------------------------------------------> Heavy Weapons
	elseif ((heavy_gunner >= 1) and (weapon_class == "heavy"))then
        dmg_increase = dmg_increase + (heavy_gunner * 0.05)
------------------------------------------------------------> Melee
	elseif ((berserker >= 1) and (weapon_class == "melee"))then
        dmg_increase = dmg_increase + (berserker * 0.05)
    end

------------------------------------------------------------> Total up damage modifiers
    shit.power = (shit.power * dmg_increase)
	
	if (math.random(1000) <= criticalChance) then
		txt = "Critical hit for " .. criticalMultiplier .. "x damage!"
		sms(2, txt, 5)
		play_sound_on_actor("material\\bullet\\collide\\metall04gr", 0.75, random_float(0.8, 1.0))
		shit.power = shit.power * criticalMultiplier
	end
	
	if npc.health > 0 then
-------------------------------------------------------------------------> Jamming Shot (also works with melees)
		if is_breaked and jamming_shot >= 1 then
			local weapon2 = npc:active_item() --Багает оружие противника
			if weapon2 then weapon2:unload_magazine(false) end
		end
		
-------------------------------------------------------------------------> Ghost Ammo v3.0
		if ((ghost_ammo >= 1) and (weapon_class ~= "melee")) then
			local ammo_list = utils_item.get_ammo(weapon:section(), weapon:id())
			local ammoCurrent = weapon:get_ammo_type()
			local ammoSec = ammo_list[ammoCurrent + 1]
			local ghostChance = ghost_ammo		-- equals to a base chance of 1%
			-- if (bone_id == 15) then
			if head_shot then
				ghostChance = ghostChance * 2
			end
			if ghostChance >= math.random(100) then
				alife_create_item(ammoSec, db.actor, {ammo = 1})
			end
		end

-------------------------------------------------------------------------> Disarming Shot
		if disarming_shot >= 1 and is_breaked2 then
			local weapon2 = npc:active_item()
			local dropChance = math.random(100) <= 15
			if weapon and weapon2 and dropChance then
				weapon2:set_condition(0.15)
				npc:drop_item(weapon2)
			end
		end
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function perk_kill_effects(victim, killer)
    if not killer then return end
    if killer:id() ~= db.actor:id() then return end

-------------------------------------------------------------------------> Bloody Mess (SMG)/Bloodbath (Special)
	if bloody_mess >= 1 and (weapon_class ~= "melee") then
		local dice = math.random(100) <= bloody_mess
		kaboom(victim, dice)
	end
	
-------------------------------------------------------------------------> Vampirism
	if vampirism >= 1 then
		if killer.health < 1 then
			killer:change_health(0.025 * vampirism)
		end
		if killer.power < 1 then
			killer:change_power(0.025 * vampirism)
		end
	end
	
-------------------------------------------------------------------------> Warmonger
    if warmonger >= 1 then
        local weapon = killer:active_item()
		if not weapon or not IsWeapon(weapon) then return end
		
        local clip = ini_sys:r_float_ex(weapon:section(), "ammo_mag_size") or 0
		if clip < 3 then return end
		local ammo_list = utils_item.get_ammo(weapon:section(), weapon:id())
		local ammoCurrent = weapon:get_ammo_type()
		local ammoSec = ammo_list[ammoCurrent + 1]
	
        local regain = math.floor(clip * 0.34)
		printf("magicin some ammo")
		alife_create_item(ammoSec, killer, {ammo = regain})
	end
	
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function on_game_start()
	RegisterScriptCallback("experience_perk_on_update", experience_perk_on_update)

    RegisterScriptCallback("npc_on_before_hit",             perk_damage_effects)
    RegisterScriptCallback("monster_on_before_hit",         perk_damage_effects)
	
    RegisterScriptCallback("npc_on_death_callback",         perk_kill_effects)
end
