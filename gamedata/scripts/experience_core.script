----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Author: Orleon
-- Last Edit: 30.12.2022 (ilrathCXV - kept .ltx importing feature for perks ONLY + added ability to configure Max Level)
-- Experience Framework for STALKER Anomaly
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MOD_VERSION = "1.1.2a"
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


local strformat = string.format

G_SKILLPOINT_PER_LEVEL			= 1			-- Number of skill points given for a new level

local G_STALKER_XP_MULT			= 1.0
local G_MUTANT_XP_MULT			= 1.0
local G_TREASURE_XP_MULT		= 1.0
local G_TASK_XP_MULT			= 1.0
local G_DISCOVER_SPOT_XP_MULT	= 1.0
local G_DISASSEMBLY_XP_MULT		= 1.0
local G_MUTANT_LOOT_XP_MULT		= 1.0
local G_REPAIR_ITEMS_XP_MULT	= 1.0
local G_COOKING_XP_MULT			= 1.0
local G_WORKSHOP_XP_MULT		= 1.0
local G_ART_XP_MULT				= 1.0

local XP_LEVEL_UP_BASE = 550	-- The base amount of experience required for each level
local XP_LEVEL_UP_MULT = 150	-- Multiplies the actor's current level
-- The formula for calculating the required amount of experience to move to the next level:
-- XP_LEVEL_UP_BASE + Current Level * XP_LEVEL_UP_MULT

-- Main actor status table of skill points, level and experience. Don't touch this!!!
XP = {
	actor_level				= 0,
	actor_experience		= 0,
	actor_skillpoints		= 0,
	actor_next_level_xp		= 550
}

ini_perks = ini_file("plugins\\experience_framework\\importer_perks.ltx")
PERKS_SETTINGS = {}

MCM_SETTINGS = {
	-- main settings
	DISPLAY_UI					= DIK_keys.DIK_J,
	KEY_MODIFIER				= 0,
	KEY_MODE					= 0,
	LEVEL_UP_NEWS				= true,
	XP_GAIN_NEWS				= true,
	NEWS_SOUND					= true,
	PERK_COLOR_NAMES			= true,
	G_MAX_LEVEL					= 60,
	GLOBAL_EXPERIENCE_MULT		= 1,
	DEBUG_MODE					= false,
	
	-- xp settings
	STALKER_XP = {
		stalker					= 25,
		bandit					= 20,
		csky					= 25,
		army					= 30,
		freedom					= 30,
		dolg					= 30,
		ecolog					= 15,
		killer					= 60,
		monolith				= 40,
		greh					= 60,
		renegade				= 20,
		isg						= 75,
		zombied					= 15
	},
	STALKER_XP_MULT_BY_RANK = {
		novice					= 1.0,
		trainee					= 1.0,
		experienced				= 2.0,
		professional			= 4.0,
		veteran					= 6.0,
		expert					= 7.0,
		master					= 8.0,
		legend					= 8.0
	},
	MUTANT_XP = {
		bloodsucker				= 60,
		boar					= 25,
		burer					= 90,
		chimera					= 150,
		controller				= 80,
		dog						= 15,
		flesh					= 10,
		gigant					= 150,
		poltergeist				= 50,
		psy_dog					= 65,
		pseudodog				= 30,
		snork					= 45,
		tushkano				= 3,
		cat						= 20,
		fracture				= 20,
		zombie					= 10,
		karlik					= 65,
		psysucker				= 70,
		lurker					= 40
	},
	MUTANT_XP_MULT_BY_RANK = {
		weak					= 0.8,
		normal					= 1.0,
		strong					= 1.5
	},
	TREASURE_XP					= 25,
	TASK_XP						= 150,
	TASK_XP_MULT				= 2.00,
	DISCOVER_SPOT_XP			= 10,
	DISASSEMBLY_WPN_XP			= 1,
	DISASSEMBLY_OUT_XP			= 1,
	DISASSEMBLY_ITM_XP			= 1,
	MUTANT_LOOT_XP				= 1,
	REPAIR_ITM_XP				= 5,
	COOKING_XP					= 5,
	WORKSHOP_CRAFT_XP			= 5,
	WORKSHOP_REPAIR_XP			= 5,
	WORKSHOP_UPGRADE_XP			= 5,
	ART_XP						= 70,
	ART_XP_MULT = {
		ART_XP_MULT_RANK_0		= 0.5,
		ART_XP_MULT_RANK_1		= 1.0,
		ART_XP_MULT_RANK_2		= 1.3,
		ART_XP_MULT_RANK_3		= 1.6
	}
}

local mcm_settings_map = {
	DISPLAY_UI					= "experience_framework_main/",
	KEY_MODIFIER				= "experience_framework_main/",
	KEY_MODE					= "experience_framework_main/",
	LEVEL_UP_NEWS				= "experience_framework_main/",
	XP_GAIN_NEWS				= "experience_framework_main/",
	NEWS_SOUND					= "experience_framework_main/",
	PERK_COLOR_NAMES			= "experience_framework_main/",
	G_MAX_LEVEL					= "experience_framework_main/",
	GLOBAL_EXPERIENCE_MULT		= "experience_framework_main/",
	DEBUG_MODE					= "experience_framework_main/",
	STALKER_XP					= "experience_framework_xp_option/",
	STALKER_XP_MULT_BY_RANK		= "experience_framework_xp_option/",
	MUTANT_XP					= "experience_framework_xp_option/",
	MUTANT_XP_MULT_BY_RANK		= "experience_framework_xp_option/",
	TREASURE_XP					= "experience_framework_xp_option/",
	TASK_XP						= "experience_framework_xp_option/",
	TASK_XP_MULT				= "experience_framework_xp_option/",
	DISCOVER_SPOT_XP			= "experience_framework_xp_option/",
	DISASSEMBLY_WPN_XP			= "experience_framework_xp_option/",
	DISASSEMBLY_OUT_XP			= "experience_framework_xp_option/",
	DISASSEMBLY_ITM_XP			= "experience_framework_xp_option/",
	MUTANT_LOOT_XP				= "experience_framework_xp_option/",
	REPAIR_ITM_XP				= "experience_framework_xp_option/",
	COOKING_XP					= "experience_framework_xp_option/",
	WORKSHOP_CRAFT_XP			= "experience_framework_xp_option/",
	WORKSHOP_REPAIR_XP			= "experience_framework_xp_option/",
	WORKSHOP_UPGRADE_XP			= "experience_framework_xp_option/",
	ART_XP						= "experience_framework_xp_option/",
	ART_XP_MULT					= "experience_framework_xp_option/"
}

G_MAX_LEVEL						= 60		-- Level Cap (Edited to allow MCM customization - ilrathCXV)

local function update_mcm_settings()
	if (ui_mcm and experience_mcm) then
		for name, val in pairs(MCM_SETTINGS) do
			if (type(val) == "table") then
				for key,_ in pairs(MCM_SETTINGS[name]) do
					MCM_SETTINGS[name][key] = ui_mcm.get("experience_framework/"..mcm_settings_map[name]..key)
				end
			else
				MCM_SETTINGS[name] = ui_mcm.get("experience_framework/"..mcm_settings_map[name]..name)
			end
			G_MAX_LEVEL						= MCM_SETTINGS.G_MAX_LEVEL or 60		-- Level Cap (Edited to allow MCM customization - ilrathCXV)
		end
	end
end

function print_dbg(text,...)
	if (MCM_SETTINGS.DEBUG_MODE) then
		printf(strformat("/ Experience Framework | " .. text,...))
	end
end

local function init_settings()
	
	-- Initialize perks settings
	ini_perks:section_for_each(function(section)
		if (not PERKS_SETTINGS[section]) then
			PERKS_SETTINGS[section] = {}
			local n,result,id,value = 0,"","",""
			
			n = ini_perks:line_count(section)
			for i=0,n-1 do
				result, id, value = ini_perks:r_line_ex(section,i,"","")
				if id and value then
					PERKS_SETTINGS[section][id] = value
				end
			end
		end
	end)
	--utils_data.print_table(PERKS_SETTINGS)
end
init_settings()

local snd_list = {
	["level_up"]		= "experience_framework\\LevelUp",
	["gain_xp"]			= "experience_framework\\ExperienceUp",
}
local function send_xp_news(news_type, gain_xp)
	local timeout = 750
	local showtime = 6000
	local color = utils_xml.get_color("d_cyan")
	local news_caption,news_text,icon
	
	if (news_type == "level up") then
		if (not MCM_SETTINGS.LEVEL_UP_NEWS) then return end
		
		news_caption = game.translate_string("st_xp_news_next_lvl")
		news_text = strformat(game.translate_string("st_xp_news_next_lvl_desc"), color, XP.actor_level, G_SKILLPOINT_PER_LEVEL)
		icon = "ui_experience_mod_icon_news_level_up"
		
		if (MCM_SETTINGS.NEWS_SOUND == true) then
			CreateTimeEvent("send_sound_xp_news_lvlup", "send_sound_level_up_news", timeout / 1000, function()
				utils_obj.play_sound(snd_list["level_up"])
				return true
			end)
		end
		
		db.actor:give_game_news(news_caption, news_text, icon, timeout, showtime, 0)
		
	elseif (news_type == "Gain XP") then
		if (not MCM_SETTINGS.XP_GAIN_NEWS) then return end
		
		news_caption = game.translate_string("st_xp_news_gain_xp")
		news_text = strformat(game.translate_string("st_xp_news_gain_xp_desc"), color, round(gain_xp))
		icon = "ui_experience_mod_icon_news_gain_xp"
		
		if (MCM_SETTINGS.NEWS_SOUND == true) then
			CreateTimeEvent("send_sound_xp_news", "send_sound_gain_xp_news", timeout / 1000, function()
				utils_obj.play_sound(snd_list["gain_xp"])
				return true
			end)
		end
		
		db.actor:give_game_news(news_caption, news_text, icon, timeout, showtime, 0)
	end
end

---------------------------------------------------------------------------------------------------------------------------------
-- Saved Perk Data Management Functions -----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
-- The main save data perk table. Use "experience_perk_on_update" callback in your script to update data
local perks_save_data = {}

axr_main.callback_add("experience_perk_on_update")		-- Params: (<string>,<table>)
function save_perk_data(perk_id, perk_data)
	if perks_save_data[perk_id] then
		perks_save_data[perk_id] = perk_data
		SendScriptCallback("experience_perk_on_update", perk_id, perk_data)
	end
end

function get_perk_data(perk_id)
	if perks_save_data[perk_id] then
		return perks_save_data[perk_id]
	end
	return nil
end

-- Called from "on_game_load" function
local function checking_perks_data()
	-- init new perks in the save data
	for id, tbl in pairs(PERKS_SETTINGS) do
		if (not perks_save_data[id]) then
			perks_save_data[id] = {
				["curr_level"] = 0,
			}
		end
	end
	
	-- delete perk data and give the actor the spent skill points if that perk no longer exists
	for id, tbl in pairs(perks_save_data) do
		if (not PERKS_SETTINGS[id]) then
			local ret_skillpoints = perks_save_data[id]["curr_level"]
			XP.actor_skillpoints = XP.actor_skillpoints + ret_skillpoints
			printf(strformat("~ Perk [%s] no longer exist! | Deleting perk from save data and return %s spent skill points to actor!", id, ret_skillpoints))
			perks_save_data[id] = nil
		else
			SendScriptCallback("experience_perk_on_update", id, tbl)	-- first update callback perk data for existing perks
		end
	end
end

---------------------------------------------------------------------------------------------------------------------------------
-- Level and Experience Management Functions ------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
-- The formula for calculating experience for the next level has been added to a separate function at the request of Igigog
function calc_xp_for_next_level(level)
	return XP_LEVEL_UP_BASE + level * XP_LEVEL_UP_MULT
end

local function level_up()
	XP.actor_level = XP.actor_level + 1
	XP.actor_skillpoints = XP.actor_skillpoints + G_SKILLPOINT_PER_LEVEL
	XP.actor_next_level_xp = XP.actor_next_level_xp + calc_xp_for_next_level(XP.actor_level)
	send_xp_news("level up")
	print_dbg("Level up! | Level: [%s] | Skill Points Added: +%s | Total Experience: %s XP | Required XP To Next Level: %s XP", XP.actor_level, G_SKILLPOINT_PER_LEVEL, XP.actor_experience, XP.actor_next_level_xp - XP.actor_experience)
	check_level_state()
end

function check_level_state()
	if (XP.actor_experience >= XP.actor_next_level_xp) and (XP.actor_level < G_MAX_LEVEL) then
		level_up()
	end
end

function increase_experience(experience, multiplier)
	if (XP.actor_level >= G_MAX_LEVEL) or (not experience) then
		return
	end
	
	local inc_xp = experience
	if multiplier then
		inc_xp = inc_xp * multiplier
	end
	inc_xp = inc_xp * MCM_SETTINGS.GLOBAL_EXPERIENCE_MULT
	
	XP.actor_experience = XP.actor_experience + inc_xp
	send_xp_news("Gain XP", inc_xp)
	print_dbg("The actor has gained experience! | Experience Gained %s XP | Total Experience: %s XP | Required XP To Next Level: %s XP", inc_xp, XP.actor_experience, XP.actor_next_level_xp - XP.actor_experience)
	check_level_state()
end

function give_max_level()
	local n = G_MAX_LEVEL - XP.actor_level
	for i=1, n do
		XP.actor_level = XP.actor_level + 1
		XP.actor_skillpoints = XP.actor_skillpoints + G_SKILLPOINT_PER_LEVEL
		XP.actor_experience = XP.actor_next_level_xp
		XP.actor_next_level_xp = XP.actor_next_level_xp + calc_xp_for_next_level(XP.actor_level)
	end
end

---------------------------------------------------------------------------------------------------------------------------------
-- Callback: 'experience_multiplier_on_before_multiply' Params: (<string>,<number>,<table>) -------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
axr_main.callback_add("experience_multiplier_on_before_multiply")
-- Register a 'experience_multiplier_on_before_multiply' callback in your script to increase the experience multiplier before multiplying it with base experience.
-- This callback will pass the type of action and the value of the multiplier of this action, as well as a table in which to pass the number of your multiplier.
---------------------------------------------------------------------------------------------------------------------------------
-- All Action Types: ------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
-- 'kill_npc'			- for killing NPC
-- 'kill_mutant'		- for killing mutants
-- 'task'				- for completing tasks
-- 'treasure'			- for finding a stash
-- 'discover_spot'		- for discovering spots
-- 'disassemble'		- for disassembly items
-- 'mutant_loot'		- for mutant looting
-- 'repair'				- for repair items
-- 'cook'				- for cooking food
-- 'workshop'			- for work on a workbench
-- 'artefact'			- for finding an artefact
---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
-- Experience Gain Functions ----------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
-- Called from 'npc_on_death_callback'
function give_actor_experience_by_npc(npc_faction, npc_rank)
	local stalker_xp = MCM_SETTINGS.STALKER_XP
	local stalker_xp_mult_by_rank = MCM_SETTINGS.STALKER_XP_MULT_BY_RANK
	
	if (not stalker_xp)
	or (not stalker_xp_mult_by_rank)
	or (not stalker_xp[npc_faction])
	or (not stalker_xp_mult_by_rank[npc_rank]) then
		print_dbg("Failed to give experience to the actor when killing the NPC | NPC Faction: [%s], NPC Rank: [%s]", npc_faction, npc_rank)
		return
	end
	
	local xp_by_npc = stalker_xp[npc_faction] * stalker_xp_mult_by_rank[npc_rank]
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "kill_npc", G_STALKER_XP_MULT, ret)
	increase_experience(xp_by_npc, tonumber(ret.new_mult) or G_STALKER_XP_MULT)
end

-- Called from 'monster_on_death_callback'
function give_actor_experience_by_mutant(mutant_name, mutant_rank)
	local mutant_xp = MCM_SETTINGS.MUTANT_XP
	
	if (not mutant_xp) or (not mutant_xp[mutant_name]) then
		print_dbg("Failed to give experience to the actor when killing the mutant | Mutant Name: [%s]", mutant_name)
		return
	end
	
	local xp_by_mutant = mutant_xp[mutant_name]
	
	if mutant_rank then
		xp_by_mutant = xp_by_mutant * MCM_SETTINGS.MUTANT_XP_MULT_BY_RANK[mutant_rank]
	end
	
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "kill_mutant", G_MUTANT_XP_MULT, ret)
	increase_experience(xp_by_mutant, tonumber(ret.new_mult) or G_MUTANT_XP_MULT)
end

-- Called from 'zz_experience_monkeys.script'
function give_actor_experience_by_task(storyline)
	local task_xp = MCM_SETTINGS.TASK_XP
	local task_xp_mult = MCM_SETTINGS.TASK_XP_MULT
	
	if (not task_xp) or (not task_xp_mult) then
		print_dbg("Failed to give the actor experience for completing the task")
		return
	end
	
	if storyline then
		task_xp = task_xp * task_xp_mult
	end
	
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "task", G_TASK_XP_MULT, ret)
	increase_experience(task_xp, tonumber(ret.new_mult) or G_TASK_XP_MULT)
end

-- Called from 'zz_experience_monkeys.script'
function give_actor_experience_by_stash()
	local treasure_xp = MCM_SETTINGS.TREASURE_XP
	
	if (not treasure_xp) then
		print_dbg("Failed to give the actor experience for completing the task")
		return
	end
	
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "treasure", G_TREASURE_XP_MULT, ret)
	increase_experience(treasure_xp, tonumber(ret.new_mult) or G_TREASURE_XP_MULT)
end

-- Called from 'zz_experience_monkeys.script'
function give_actor_experience_by_discover_spot()
	local discover_spot_xp = MCM_SETTINGS.DISCOVER_SPOT_XP
	
	if (not discover_spot_xp) then
		print_dbg("Failed to give the actor experience for discovering spot")
		return
	end
	
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "discover_spot", G_DISCOVER_SPOT_XP_MULT, ret)
	increase_experience(discover_spot_xp, tonumber(ret.new_mult) or G_DISCOVER_SPOT_XP_MULT)
end

-- Called from 'zz_experience_monkeys.script'
function give_actor_experience_by_disassembly_items(obj)
	local dis_weapons_xp = MCM_SETTINGS.DISASSEMBLY_WPN_XP
	local dis_outfits_xp = MCM_SETTINGS.DISASSEMBLY_OUT_XP
	local dis_items_xp = MCM_SETTINGS.DISASSEMBLY_ITM_XP
	
	if (not dis_weapons_xp) or (not dis_outfits_xp) or (not dis_items_xp) then
		print_dbg("Failed to give the actor experience for disassembling items")
		return
	end
	
	local xp_by_disassemble = 0
	
	if IsWeapon(obj) then
		xp_by_disassemble = dis_weapons_xp
	elseif IsOutfit(obj) or IsHeadgear(obj) then
		xp_by_disassemble = dis_outfits_xp
	else
		xp_by_disassemble = dis_items_xp
	end
	
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "disassemble", G_DISASSEMBLY_XP_MULT, ret)
	increase_experience(xp_by_disassemble, tonumber(ret.new_mult) or G_DISASSEMBLY_XP_MULT)
end

-- Called from 'zz_experience_monkeys.script'
function give_actor_experience_by_mutant_loot(loot_count)
	local mutant_loot_xp = MCM_SETTINGS.MUTANT_LOOT_XP
	
	if (not mutant_loot_xp) or (loot_count == 0) then
		print_dbg("Failed to give the actor experience for looting mutants")
		return
	end
	
	mutant_loot_xp = mutant_loot_xp * loot_count
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "mutant_loot", G_MUTANT_LOOT_XP_MULT, ret)
	increase_experience(mutant_loot_xp, tonumber(ret.new_mult) or G_MUTANT_LOOT_XP_MULT)
end

-- Called from 'zz_experience_monkeys.script'
function give_actor_experience_by_repair_items()
	local repair_items_xp = MCM_SETTINGS.REPAIR_ITM_XP
	
	if (not repair_items_xp) then
		print_dbg("Failed to give the actor experience for repairing items")
		return
	end
	
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "repair", G_REPAIR_ITEMS_XP_MULT, ret)
	increase_experience(repair_items_xp, tonumber(ret.new_mult) or G_REPAIR_ITEMS_XP_MULT)
end

-- Called from 'zz_experience_monkeys.script'
function give_actor_experience_by_cooking()
	local cooking_xp = MCM_SETTINGS.COOKING_XP
	
	if (not cooking_xp) then
		print_dbg("Failed to give the actor experience for cooking food")
		return
	end
	
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "cook", G_COOKING_XP_MULT, ret)
	increase_experience(cooking_xp, tonumber(ret.new_mult) or G_COOKING_XP_MULT)
end

-- Called from 'zz_experience_monkeys.script'
function give_actor_experience_by_workshop(work_type, count)
	local xp_by_craft = MCM_SETTINGS.WORKSHOP_CRAFT_XP
	local xp_by_repair = MCM_SETTINGS.WORKSHOP_REPAIR_XP
	local xp_by_upgrade = MCM_SETTINGS.WORKSHOP_UPGRADE_XP
	
	if (not xp_by_craft)
	or (not xp_by_repair)
	or (not xp_by_upgrade)
	or (not work_type)
	or (not count) then
		print_dbg("Failed to give the actor experience for working at a workbench")
		return
	end
	
	local xp_by_work = 0
	
	if (work_type == "craft") then
		xp_by_work = xp_by_craft
	elseif (work_type == "repair") then
		xp_by_work = xp_by_repair
	elseif (work_type == "upgrade") then
		xp_by_work = xp_by_upgrade
	end
	
	xp_by_work = xp_by_work * count
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "workshop", G_WORKSHOP_XP_MULT, ret)
	increase_experience(xp_by_work, tonumber(ret.new_mult) or G_WORKSHOP_XP_MULT)
end

-- Called from 'actor_on_item_before_pickup'
function give_actor_experience_by_artefact(af_rank)
	local base_xp = MCM_SETTINGS.ART_XP
	
	if (not base_xp) then  
		print_dbg("Failed to give the actor experience for searching a artefact")
		return
	end
	
	local af_rank = af_rank or 1
	local rank_mult = MCM_SETTINGS.ART_XP_MULT["ART_XP_MULT_RANK_" .. af_rank]
	local xp_by_art = base_xp * rank_mult
	
	local ret = {}
	SendScriptCallback("experience_multiplier_on_before_multiply", "artefact", G_ART_XP_MULT, ret)
	increase_experience(xp_by_art, tonumber(ret.new_mult) or G_ART_XP_MULT)
end

---------------------------------------------------------------------------------------------------------------------------------
-- Callbacks --------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
-- Hit registration of the last draftsman. Needed for compatibility with some mods.
local enemy_last_hit = {}

function clean_enemy_last_hit()
	if is_empty(enemy_last_hit) then
		return
	end
	
	for id, who in pairs(enemy_last_hit) do
		local enemy = level.object_by_id(id)
		if (not enemy) then
			enemy_last_hit[id] = nil
		end
	end
end

local function enemy_hit_registrator(enemy, amount, local_direction, who, bone_index)
	if (who) and (who:id() ~= enemy:id()) and (amount > 0) then
		enemy_last_hit[enemy:id()] = who:id()
	end
end

-- Give an actor experience for killing NPC's
local function npc_on_death_callback(npc, who)
	if enemy_last_hit[npc:id()] then
		if (enemy_last_hit[npc:id()] == AC_ID) then
			local npc_comm = character_community(npc)
			local npc_rank = ranks.get_obj_rank_name(npc)
			give_actor_experience_by_npc(npc_comm, npc_rank)
		end
		enemy_last_hit[npc:id()] = nil
	end
end

local mutant_clsid_to_section = {
	[clsid.bloodsucker_s] 	= "bloodsucker",
	[clsid.boar_s] 			= "boar",
	[clsid.burer_s] 		= "burer",
	[clsid.chimera_s]		= "chimera",
	[clsid.controller_s]	= "controller",
	[clsid.dog_s]			= "dog",
	[clsid.flesh_s]			= "flesh",
	[clsid.gigant_s]		= "gigant",
	[clsid.psy_dog_s]		= "psy_dog",
	[clsid.psy_dog_phantom_s] = "psy_dog",
	[clsid.pseudodog_s]		= "pseudodog",
	[clsid.snork_s]			= "snork",
	[clsid.tushkano_s]		= "tushkano",
	[clsid.cat_s]			= "cat",
	[clsid.fracture_s]		= "fracture",
	[clsid.zombie_s]		= "zombie"
}
local mutant_kind_to_section = {
	["SM_KARLIK"]			= "karlik",
	["SM_PSYSUCKER"]		= "psysucker",
	["SM_LURKER"]			= "lurker"
}

-- Give an actor experience for killing mutants
local function monster_on_death_callback(monster, who)
	if enemy_last_hit[monster:id()] then
		if (enemy_last_hit[monster:id()] == AC_ID) then
			local clsid = monster:clsid()
			local section = monster:section()
			local kind = SYS_GetParam(0, section, "kind", "unknown")
			local mutant = mutant_kind_to_section[kind] or mutant_clsid_to_section[clsid]
			local rank = SYS_GetParam(0, section, "spec_rank", "normal")
			
			if mutant then
				give_actor_experience_by_mutant(mutant, rank)
			end
		end
		enemy_last_hit[monster:id()] = nil
	end
end

local function poltergeist_on_death_callback(type, obj, name)
	if (type ~= "mutants") then
		return
	end
	
	if (name == "poltergeist")
	or (name == "pyrogeist")
	or (name == "pseudogeist") then
		give_actor_experience_by_mutant("poltergeist")
	end
end

-- Give an actor experience for finding an artefact
local function actor_on_item_before_pickup(obj, flags)
	if not (obj and IsArtefact(obj)) then return end
	
	-- Hack to prevent player from exploting Artefacts Containers (gaining rank by recieving artefacts)
	if _G.ARTY_FROM_CONT then
		_G.ARTY_FROM_CONT = nil
		return
	end
	
	local artefact = obj:get_artefact()
	local anomaly = bind_anomaly_zone.parent_zones_by_artefact_id[obj:id()]
	-- Artefacts found counter incrementation.
	-- Checks to make sure artefact id hasn't already been logged.
	if (artefact) then
		artefact:FollowByPath("NULL", 0, vector():set(500,500,500))
		if not (game_statistics.actor_artefacts[obj:id()]) then
			game_statistics.actor_artefacts[obj:id()] = true
			local af_rank = SYS_GetParam(2, obj:section(), "af_rank") or 0
			give_actor_experience_by_artefact(af_rank)
		else
			return
		end
	end
end

local function on_game_load()
	checking_perks_data()
end

local function save_state(data)
	if not (data.experience_manager) then
		data.experience_manager = {}
	end
	
	data.experience_manager.XP = XP
	data.experience_manager.perks_save_data = perks_save_data
	data.experience_manager.enemy_last_hit = enemy_last_hit
end

local function load_state(data)
	if not (data.experience_manager) then
		return
	end
	
	XP = data.experience_manager.XP or XP
	perks_save_data = data.experience_manager.perks_save_data or perks_save_data
	enemy_last_hit = data.experience_manager.enemy_last_hit or enemy_last_hit
end

local timer_on_update = 0
local timer_on_update_interval = 2
local function actor_on_update()
	local tg = math.floor(time_global() * 0.01)
	if tg < timer_on_update then return end
	timer_on_update = tg + timer_on_update_interval
	
	clean_enemy_last_hit()
end

local function server_entity_on_unregister(se_obj, typ)
	if (enemy_last_hit[se_obj.id]) then
		enemy_last_hit[se_obj.id] = nil
	end
end

local function start_experience_framework()
	local perks_loaded = 0
	
	for k,v in pairs(PERKS_SETTINGS) do
		perks_loaded = perks_loaded + 1
	end
	
	print_dbg("VERSION %s", MOD_VERSION)
	
	if (perks_loaded > 0) then
		print_dbg("%s skills loaded...", perks_loaded)
	end
end

function on_game_start()
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("on_option_change",update_mcm_settings)
	RegisterScriptCallback("npc_on_death_callback",npc_on_death_callback)
	RegisterScriptCallback("monster_on_death_callback",monster_on_death_callback)
	RegisterScriptCallback("actor_on_interaction",poltergeist_on_death_callback)
	RegisterScriptCallback("actor_on_item_before_pickup",actor_on_item_before_pickup)
	RegisterScriptCallback("npc_on_hit_callback",enemy_hit_registrator)
	RegisterScriptCallback("monster_on_hit_callback",enemy_hit_registrator)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("server_entity_on_unregister",server_entity_on_unregister)
	update_mcm_settings()
	start_experience_framework()
end