--[local ammo_finder = 0

local function experience_perk_on_update(id, data)
	if (id == "perk_ammo_finder") then
		ammo_finder = data["curr_level"] * 10
	end
end

-------------------------------------------------------------> Ammo Eater

base_death_ammo = death_manager.try_spawn_ammo
local item_by_community = {}
local item_count = {}
local death_ini

function get_item_count()
	-- Create a list by community of the percent chance to spawn an item
	death_ini = itms_manager.ini_death
	death_manager.SetDiffModifications()
	
	local community_list = { "stalker", "dolg", "freedom", "bandit", "army", "zombied", "ecolog", "killer", "monolith", "csky" , "renegade" , "greh" , "isg"  , "greh_npc" , "army_npc"}
	local ranks = { "" , "_novice" , "_trainee" , "_experienced" , "_professional" , "_veteran" , "_expert" , "_master" , "_legend" }
	local private = { "" , "_private" }
	
	-- Collect community items
	for k1,v1 in pairs(community_list) do
		for k2,v2 in pairs(private) do
			for k3,v3 in pairs(ranks) do
				local x = v1 .. v2 .. v3
				item_by_community[x] = {}
				if death_ini:section_exist(x) then
					local n = death_ini:line_count(x)
					local id, value = "", ""
					local cnt = 0
					for i=0,n-1 do
						result, id, value	= death_ini:r_line_ex(x,i,"","")
						local temp = not (death_ini:line_exist("exclude_from_multi",id)) and diff_multi or 1
						cnt = cnt + 1
						item_by_community[x][cnt] = {}
						item_by_community[x][cnt].sec = id
						item_by_community[x][cnt].cha = value and tonumber(value) * temp or 0
						--printf("item by community difficulty multi %s : %s",temp,item_by_community[x][id])
					end
					shuffle_table(item_by_community[x])
				end
			end
		end
	end

	-- Collect items count
	local n = death_ini:line_count("item_count")
	local id, value = "", ""
	for i=0,n-1 do
		local result, id, value	= death_ini:r_line_ex("item_count",i,"","")
		local p = str_explode(value,",")
		if (p) then
			p[1] = tonumber(p[1]) or 0
			p[2] = tonumber(p[2]) or p[1]
			item_count[id] = {math.ceil(p[1] * cnt_multi_1),math.ceil(p[2] * cnt_multi_2)}
			--printf("item count  min%s:max%s  item_count[id] min%s:max%s",cnt_multi_1,cnt_multi_2,item_count[id][1],item_count[id][2])
		end
	end
end

function death_manager.try_spawn_ammo(npc)
	local ammo_class,sec,number
	local function itr(npc,itm)
		if (IsWeapon(nil,itm:clsid()) and not npc:marked_dropped(itm)) then
			ammo_class = parse_list(ini_sys,itm:section(),"ammo_class")
			
			-- randomly spawn only 1 ammo type per found weapon
			if (#ammo_class > 0) then
				sec = ammo_class[math.random(1,#ammo_class)]

				if (sec) then 
					if sec == "ammo_12x76_dart" or sec == "ammo_12x76_dart_bad" or sec == "ammo_12x76_dart_verybad" then
						rng = math.random(1,3)
					
						if rng == 1 then
							sec = "ammo_12x76_dart"
						end
							
						if rng == 2 then
							sec = "ammo_12x76_zhekan"
						end
							
						if rng == 3 then
							sec = "ammo_12x70_buck"
						end
					end
					
					if sec == "ammo_23x75_barrikada" then
						rng = math.random(1,3)
						
						if rng == 1 then
							sec = "ammo_23x75_barrikada"
						else
							sec = "ammo_23x75_shrapnel"
						end
					end
					
					if (item_count[sec]) then
						number = math.random(item_count[sec][1], item_count[sec][2])
						number = math.floor(number * (1 + (0.2 * ammo_finder)))
					else 
						number = 0
					end
					if (number > 0 and ini_sys:section_exist(sec)) then
						alife_create_item(sec, npc, {ammo = number})
					end
				end
			end
			
			-- spawn grenade ammo if there is launcher attached
			
			if (ini_sys:r_float_ex(itm:section(),"grenade_launcher_status") > 0) then
				ammo_class = parse_list(ini_sys,itm:section(),"grenade_class")
				for i=1,#ammo_class do
					sec = ammo_class[i]
					if (sec) then
						if (item_count[sec]) then
							number = math.random(item_count[sec][1], item_count[sec][2])
							number = math.floor(number * (1 + (0.2 * ammo_finder)))
						else 
							number = math.random(0,2)
						end
						if (number > 0 and ini_sys:section_exist(sec)) then 
							-- DPH_LOOT_COND
							if ui_mcm.get('dph_loot_cond/ammo/disable_bad') and sec:find('%_bad$') then
								sec = sec:sub(1, -5)
							end
							chance = math.random(0,100)
							if chance > 30 then
								alife_create_item(sec, npc, {ammo = number * ui_mcm.get('dph_loot_cond/ammo/factor')})
							end
							-- DPH_LOOT_COND
						end
					end
				end
			end
		end
	end
	npc:iterate_inventory(itr,npc)
	
	CreateTimeEvent(npc:id(), "npc_ammo_aggregation", 0, item_weapon.ammo_aggregation_full, npc:id())
end

function on_game_start()
	RegisterScriptCallback("experience_perk_on_update", experience_perk_on_update)
end
]--