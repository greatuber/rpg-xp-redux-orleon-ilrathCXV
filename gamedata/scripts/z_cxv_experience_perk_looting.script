local ammo_finder = 0
local medicine_man = 0
local plate_finder = 0
local arte_finder = 0
local scavenger = 0
local careful_handler = 0
local midas_touch = 0

local function experience_perk_on_update(id, data)
	if (id == "perk_ammo_finder") then
		ammo_finder = data["curr_level"]
	end
	if (id == "perk_medicine_man") then
		medicine_man = data["curr_level"]
	end
	if (id == "perk_plate_finder") then
		plate_finder = data["curr_level"]
	end
	if (id == "perk_artefinder") then
		arte_finder = data["curr_level"]
	end
	if (id == "perk_scavenger") then
		scavenger = data["curr_level"]
	end
	if (id == "perk_careful_handler") then
		careful_handler = data["curr_level"]
	end
	if (id == "perk_midas_touch") then
		midas_touch = data["curr_level"]
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

-- creates an item with a random amount of uses or condition
local function create_item_random_uses(i, box)
    --smr_debug.get_log().info("loot/general", "Creating item with random uses: %s", i)
    local max_uses = ini_sys:r_float_ex(i, "max_uses")
    local se_item = alife_create_item(i, box)
    if max_uses then
        alife_process_item(i, se_item.id, {uses = (math.random(1, max_uses))})
    elseif utils_item.is_degradable(nil, se_item.id) then
        alife_process_item(i, se_item.id, {cond = (math.random(50,100)/100)})
    end
end

local function roll_item_tiered(t, box, looter_level)
    local r = looter_level
    table.sort(t, function(a, b) return a[1] > b[1] end)
    for i, n in ipairs(t) do
        if (r >= n[1]) then
            local itm = n[2][math.random(#n[2])]
            smr_debug.get_log().info("loot/rolls", "Rolled succesfully for %s (%s >= %s)", itm, r, n[1])
            create_item_random_uses(itm, box)
            return true
        end
    end
    return false
end

function try_spawn_meds(box, looter_level)
    if math.random(1,100) <= looter_level then
		local medChance = math.floor(looter_level * math.random(1.0,3.0))
        local tbl = {
			{ 100, meds_tier5},
            { 90, meds_tier4},
            { 70, meds_tier3},
            { 40, meds_tier2},
            { 0, meds_tier1},
        }
        roll_item_tiered(tbl, box, medChance)
    end
end

local meds_tier1 = {
    "bandage",
    "caffeine",
    "drug_sleepingpills",
    "yadylin",
    "medkit",
    "glucose_s",
}

local meds_tier2 = {
    "medkit_army",
    "stimpack",
    "salicidic_acid",
    "glucose",
    "drug_psy_blockade",
    "akvatab",
	"drug_coagulant",
	"antirad",
}

local meds_tier3 = {
    "medkit_scientic",
    "stimpack_army",
    "drug_radioprotector",
    "drug_anabiotic",
	"drug_booster",
    "antirad_cystamine",
	"antirad_kalium",
	"jgut",
}

local meds_tier4 = {
    "stimpack_scientic",
	"adrenalin",
	"morphine",
	"survival_kit",
	"tetanus",
}

local meds_tier5 = {
	"medkit_ai1",
}


function try_spawn_scav(box, looter_level)
    if math.random(1,100) <= looter_level then
		local scavChance = math.floor(looter_level * math.random(1.0,3.0))
        local tbl = {
			{ 100, scav_tier5},
            { 90, scav_tier4},
            { 70, scav_tier3},
            { 40, scav_tier2},
            { 0, scav_tier1},
        }
        roll_item_tiered(tbl, box, scavChance)
    end
end

local scav_tier1 = {
	"prt_i_paper",
	"prt_i_wood",
	"prt_i_scrap",
	"prt_i_leather",
	"prt_i_plastic",
	
}

local scav_tier2 = {
	"prt_i_textolite",
	"prt_i_copper",
	"prt_i_fasteners",
	"ball_hammer",
	"e_syringe",
	
}

local scav_tier3 = {
	"prt_i_capacitors",
	"prt_i_transistors",
	"prt_i_resistors",
	"swiss_knife",
	"grooming",
	"casing_s",
	"bullet_shotgun",
}

local scav_tier4 = {
	"broken_detector",
	"flashlight_broken",
	"walkie",
	"batteries_dead",
	"powder_1",
	"powder_2",
	"casing_p",
	"casing_r5",
	"bullet_pistol",
	"bullet_r5",
	"bullet_shotgun_ap",
}

local scav_tier5 = {
	"lead_box",
	"powder_3",
	"casing_r7",
	"bullet_pistol_ap",
	"bullet_r5_ap",
	"bullet_r7",
	"bullet_r7_ap",
}

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------> Ammo Eater
base_death_ammo = death.manager.try_spawn_ammo
function death.manager.try_spawn_ammo(npc)
	local ammo_class,sec,number
	local function itr(npc,itm)
		if (IsWeapon(nil,itm:clsid()) and not npc:marked_dropped(itm)) then
			ammo_class = parse_list(ini_sys,itm:section(),"ammo_class")
			
			-- randomly spawn only 1 ammo type per found weapon
			if (#ammo_class > 0) then
				sec = ammo_class[math.random(1,#ammo_class)]
				if (sec) then 
					if (item_count[sec]) then
						number = math.random(item_count[sec][1], item_count[sec][2])
						number = math.floor(number * (1 + (0.2 * ammo_finder)))
					else 
						number = 0
					end
					if (number > 0 and ini_sys:section_exist(sec)) then
						alife_create_item(sec, npc, {ammo = number})
					end
				end
			end
			
			-- spawn grenade ammo if there is launcher attached
			if (ini_sys:r_float_ex(itm:section(),"grenade_launcher_status") > 0) then
				ammo_class = parse_list(ini_sys,itm:section(),"grenade_class")
				for i=1,#ammo_class do
					sec = ammo_class[i]
					if (sec) then
						if (item_count[sec]) then
							number = math.random(item_count[sec][1], item_count[sec][2])
							number = math.floor(number * (1 + (0.2 * ammo_finder)))
						else 
							number = math.random(0,2)
							number = math.floor(number * (1 + (0.2 * ammo_finder)))
						end
						if (number > 0 and ini_sys:section_exist(sec)) then 
							alife_create_item(sec, npc, {ammo = number})
						end
					end
				end
			end
		end
	end
	npc:iterate_inventory(itr,npc)
	
	CreateTimeEvent(npc:id(), "npc_ammo_aggregation", 0, item_weapon.ammo_aggregation_full, npc:id())
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

local CreateReleaseItem = death_manager.create_release_item
function death_manager.create_release_item(victim)
	CreateReleaseItem(victim)
-------------------------------------------------------------> Plate Finder
	if plate_finder >= 1 then
		local plateChance = (plate_finder * 5) >= math.random(100)
		if plateChance then
			alife_create_item("af_kevlar", victim, {cond = (math.random(1,15) * 0.01)})
		end
	end
		
-----------------------------------------------------------> Medicine Man
	if medicine_man >= 1 then
		local medQuality = medicine_man * 7
		try_spawn_meds(victim, medQuality)
	end
	
-----------------------------------------------------------> Scavenger
	if scavenger >= 1 then
		local scavQuality = scavenger * 7
		try_spawn_scav(victim, scavQuality)
	end
	
------------------------------------------------------------> Arte-finder
	if arte_finder >= 1 then
		local artyChance = arte_finder * 5
		local artyDrop = math.random(100) <= artyChance
		if artyDrop then
			local allowed_artefacts = drx_da_main_artefacts.allowed_artefacts
			local minCondition = grok_artefacts_random_condition.arti_min_eff + math.floor((arte_finder) ^ 1.6)	-- 1 | 3 | 5 | 9 | 13
			local maxCondition = grok_artefacts_random_condition.arti_max_eff + math.floor((arte_finder) ^ 1.6) -- 1 | 3 | 5 | 9 | 13
			local conditionArty = math.random(minCondition, maxCondition)
			alife_create_item(allowed_artefacts[math.random(#allowed_artefacts)], victim, {cond = (conditionArty * 0.01)})
		end
	end
	
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function perk_loot_improvement(item)------------------> actor_on_item_take(item)
------Мародёр 2. Качество собираемых пушек	----------> Weapon Loot Improved Condition
	if careful_handler >= 1 then
		local condition_baseline = (10 + (careful_handler * 5)) * 0.01
		if IsWeapon(item) then
            if item:condition() < condition_baseline then
                item:set_condition(condition_baseline * 0.01)
            end
			if (not IsMelee(item)) then
				local wpn_parts = item_parts.get_parts_con(item) or 0
				if wpn_parts ~= 0 then
					local parts_baseline = 10 + (careful_handler * 5)
					for k,v in pairs(wpn_parts) do
						if v >= 0 and v < condition_baseline then
							wpn_parts[k] = condition_baseline
						end
					end
				end
			end
        end
------Мародёр 3. Качество собираемых броников ---------> Armor/Helmet Loot Improved Condition
		if IsOutfit(item) or IsHeadgear(item) then
            if item:condition() < condition_baseline then
                item:set_condition(condition_baseline * 0.01)
            end
        end
    end
	
------[NEW] Arte-finder functionality (increases to GAMMA's min and max thresholds)
	
	if arte_finder >= 1 then
		local typeOfArtefact = SYS_GetParam(0, item:section(), "kind")
		if IsArtefact(item) or (typeOfArtefact == "i_arty_cont") then
			local minCondition = grok_artefacts_random_condition.arti_min_eff + math.floor((arte_finder) ^ 1.6)	-- 1 | 3 | 5 | 9 | 13
			local maxCondition = grok_artefacts_random_condition.arti_max_eff + math.floor((arte_finder) ^ 1.6) -- 1 | 3 | 5 | 9 | 13
			if item:condition() < (minCondition * 0.01) then
				local condArty  = (math.random(minCondition, maxCondition) * 0.01)
				item:set_condition(condArty)
			end
		end
	end
		

------Мародёр-6: увеличивает количество собираемого бабла на 3% за уровень. --------> May need looking at for same reason as above
	if midas_touch >= 1 then
		if IsItem("money", item:section()) then
			if used_wallet then
			used_wallet = false
				return
			end
			local mult = 1
            mult = 1 + (0.05 * midas_touch)
        end
        local money_amount = IsItem("money", item:section())
        if money_amount and money_amount[1] then
            if money_amount[2] then
                local min_amt = math.floor(tonumber(money_amount[1])) * mult or 10
                local max_amt = math.floor(tonumber(money_amount[2])) * mult or 30
                db.actor:give_money(math.random(min_amt, max_amt))
            else
                local amount = math.floor(tonumber(money_amount[1])) * mult or 10
                db.actor:give_money(amount)
            end
        end
        db.actor:drop_item(item)
    end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function on_game_start()
	RegisterScriptCallback("experience_perk_on_update", experience_perk_on_update)

	RegisterScriptCallback("actor_on_item_take",             perk_loot_improvement)
	RegisterScriptCallback("actor_item_to_ruck",             perk_loot_improvement)
end